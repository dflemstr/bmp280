//! Common error definitions.
use std::error;
use std::fmt;
use std::result;

use i2cdev;

/// A result returned by a driver operation.
pub type Result<A, D> = result::Result<A, Error<D>>;

/// An error generated by a driver operation.
pub enum Error<D>
where
    D: i2cdev::core::I2CDevice,
{
    /// An error originating from the I2C bus.
    I2C(D::Error),
    /// The chip has a different chip ID than the one supplied.
    UnexpectedChipId(u8),
}

impl<D> fmt::Debug for Error<D>
where
    D: i2cdev::core::I2CDevice,
{
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::I2C(ref e) => f.debug_tuple("I2C").field(e).finish(),
            Error::UnexpectedChipId(ref id) => f.debug_tuple("UnexpectedChipId").field(id).finish(),
        }
    }
}

impl<D> fmt::Display for Error<D>
where
    D: i2cdev::core::I2CDevice,
{
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Error::I2C(ref e) => write!(f, "i2c error: {}", e),
            Error::UnexpectedChipId(ref id) => write!(f, "unexpected chip id: {}", id),
        }
    }
}

impl<D> error::Error for Error<D>
where
    D: i2cdev::core::I2CDevice,
{
    fn description(&self) -> &str {
        match *self {
            Error::I2C(_) => "i2c error",
            Error::UnexpectedChipId(_) => "unexpected chip id",
        }
    }
}
